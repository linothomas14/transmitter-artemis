// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	entity "transmitter-artemis/entity"

	mock "github.com/stretchr/testify/mock"
)

// ClientRepository is an autogenerated mock type for the ClientRepository type
type ClientRepository struct {
	mock.Mock
}

// GetAllClientData provides a mock function with given fields:
func (_m *ClientRepository) GetAllClientData() ([]entity.ClientData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllClientData")
	}

	var r0 []entity.ClientData
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.ClientData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.ClientData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ClientData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientRepository creates a new instance of ClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientRepository {
	mock := &ClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
