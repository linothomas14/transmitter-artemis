// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "transmitter-artemis/entity"

	mock "github.com/stretchr/testify/mock"
)

// QueueService is an autogenerated mock type for the QueueService type
type QueueService struct {
	mock.Mock
}

// SendMessage provides a mock function with given fields: ctx, msg, clientData
func (_m *QueueService) SendMessage(ctx context.Context, msg []byte, clientData entity.ClientData) error {
	ret := _m.Called(ctx, msg, clientData)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, entity.ClientData) error); ok {
		r0 = rf(ctx, msg, clientData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueueService creates a new instance of QueueService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueService(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueService {
	mock := &QueueService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
