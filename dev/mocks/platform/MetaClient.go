// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "transmitter-artemis/dto"

	mock "github.com/stretchr/testify/mock"
)

// MetaClient is an autogenerated mock type for the MetaClient type
type MetaClient struct {
	mock.Mock
}

// SendRequestToMeta provides a mock function with given fields: ctx, URL, token, payload
func (_m *MetaClient) SendRequestToMeta(ctx context.Context, URL string, token string, payload dto.RequestToMeta) (dto.ResponseFromMeta, int, error) {
	ret := _m.Called(ctx, URL, token, payload)

	if len(ret) == 0 {
		panic("no return value specified for SendRequestToMeta")
	}

	var r0 dto.ResponseFromMeta
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, dto.RequestToMeta) (dto.ResponseFromMeta, int, error)); ok {
		return rf(ctx, URL, token, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, dto.RequestToMeta) dto.ResponseFromMeta); ok {
		r0 = rf(ctx, URL, token, payload)
	} else {
		r0 = ret.Get(0).(dto.ResponseFromMeta)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, dto.RequestToMeta) int); ok {
		r1 = rf(ctx, URL, token, payload)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, dto.RequestToMeta) error); ok {
		r2 = rf(ctx, URL, token, payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMetaClient creates a new instance of MetaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetaClient {
	mock := &MetaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
